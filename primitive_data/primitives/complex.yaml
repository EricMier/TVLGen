---
name: "complex"
description: "Complex (composed) primitives that are highly application specific."
...
---
primitive_name: 'pack_bits_linear'
brief_description: 'Packs elements from a vector together using a fixed bitwidth.'
detailed_description: |
  Packs elements from a vector together using a fixed bitwidth. The bitwidth
  must be less than the number of bits in the vector's base type.
  The elements are packed together in little-endian order, i.e. the least
  significant bits of the first element are used first.
parameters:
  - ctype: "const typename Vec::register_type"
    name: "data"
    description: "Data vector."
  - ctype: "const unsigned"
    name: "bitwidth"
    description: "Bitwidth of each element."
returns:
  ctype: "typename Vec::register_type"
  description: "Vector containing packed elements."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>"]
    implementation: |
      using T = typename Vec::base_type;
      // we must not use std::is_signed_v<T> for the ac_int, since we don't want the sign bit to be populated.
      using BigIntT = ac_int<Vec::vector_size_b(), false>;//std::is_signed_v<T>>;
      BigIntT tmp_result{0};
      #pragma unroll
      for (unsigned i = 0; i < Vec::vector_element_count(); ++i) {
        tmp_result |=  (BigIntT{data[i]}) << (bitwidth*i);
      }
      typename Vec::register_type result{};
      #pragma unroll
      for (std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
        result[i] = tmp_result.template slc<(sizeof(T)*CHAR_BIT)>((unsigned)(i*(sizeof(T)*CHAR_BIT)));
      }
      return result;
...
---
primitive_name: 'pack_bits_treelike'
brief_description: 'Packs elements from a vector together using a fixed bitwidth.'
detailed_description: |
  Packs elements from a vector together using a fixed bitwidth. The bitwidth
  must be less than the number of bits in the vector's base type.
  The elements are packed together in little-endian order, i.e. the least
  significant bits of the first element are used first.
  Example: Assuming 8 values in vector, bitwidth=3
    result = data
    stage=1, i=0, bitwidth=3: result[ 8] = (result[ 0]) | (result[ 1] <<  3) ==> ([0: 5] filled)
    stage=1, i=1, bitwidth=3: result[ 9] = (result[ 2]) | (result[ 3] <<  3) ==> ([0: 5] filled)
    stage=1, i=2, bitwidth=3: result[10] = (result[ 4]) | (result[ 5] <<  3) ==> ([0: 5] filled)
    stage=1, i=3, bitwidth=3: result[11] = (result[ 6]) | (result[ 7] <<  3) ==> ([0: 5] filled)

    stage=2, i=0, bitwidth=3: result[12] = (result[ 8]) | (result[ 9] <<  6) ==> ([0:11] filled)
    stage=2, i=1, bitwidth=3: result[13] = (result[10]) | (result[11] <<  6) ==> ([0:11] filled)

    stage=3, i=0, bitwidth=3: result[14] = (result[12]) | (result[13] << 12) ==> ([0:23] filled)

    return result[2*Vec::vector_element_count()-2];
parameters:
  - ctype: "const typename Vec::register_type"
    name: "data"
    description: "Data vector."
  - ctype: "const unsigned"
    name: "bitwidth"
    description: "Bitwidth of each element."
returns:
  ctype: "typename Vec::register_type"
  description: "Vector containing packed elements."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>"]
    implementation: |
      using T = typename Vec::base_type;
      using UnsignedT = std::make_unsigned_t<T>;
      using BigIntT = ac_int<Vec::vector_size_b(), false>;
      //we are wasting some space here, but it is easier to implement (and maybe even more efficient)
      BigIntT tmp_result[Vec::vector_element_count()];
      #pragma unroll
      for (unsigned int i = 0; i < (Vec::vector_element_count()>>1); ++i) {
        tmp_result[i] = BigIntT{(UnsignedT)data[(i<<1)]} | (BigIntT{(UnsignedT)data[(i<<1)+1]} << bitwidth);
      }
      unsigned current_result_position = Vec::vector_element_count()>>1;
      unsigned previous_stage_start_idx = 0;
      unsigned current_stage = 1;
      #pragma unroll cilog2((Vec::vector_element_count()>>1))
      for(size_t current_upper_idx = (Vec::vector_element_count()>>2); current_upper_idx >= 1; current_upper_idx>>=1) {
          #pragma unroll
          for(size_t i = 0; i < current_upper_idx; ++i) {
            tmp_result[current_result_position + i] =
                tmp_result[previous_stage_start_idx + (i<<1)] | (tmp_result[previous_stage_start_idx + (i<<1)+1] << (bitwidth<<current_stage));
          }
          current_result_position += current_upper_idx;
          previous_stage_start_idx += current_upper_idx<<1;
          ++current_stage;
      }
      BigIntT tmp_result_int = tmp_result[Vec::vector_element_count()-2];
      typename Vec::register_type result{};
      #pragma unroll
      for (std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
        result[i] = tmp_result_int.template slc<(sizeof(T)*CHAR_BIT)>((unsigned)(i*(sizeof(T)*CHAR_BIT)));
      }
      return result;
...
---
primitive_name: "pack_bits_linear_merge"
brief_description: ""
detailed_description: |
  Packs elements from two vector registers together using a fixed bitwidth. The bitwidth
  must be less than the number of bits in the vector's base type.
  The elements are packed together in little-endian order, i.e. the least
  significant bits of the first element are used first.
  The 'src' operand is assumed to be packed already. The 'bit_offset' parameter indicates
  the bit offset of the last set bit in the 'src' operand. The 'data' operand is packed
  and merged with the 'src' operand. The 'bitwidth' parameter indicates the bitwidth of
  each element in the 'data' operand.
parameters:
  - ctype: "const typename Vec::register_type"
    name: "src"
    description: "Source register which is used for merging (assumed to be packed already)."
  - ctype: "const unsigned"
    name: "bit_offset"
    description: "Bit offset of the last set bit."
  - ctype: "const typename Vec::register_type"
    name: "data"
    description: "Data vector."
  - ctype: "const unsigned"
    name: "bitwidth"
    description: "Bitwidth of each element."
returns:
  ctype: "std::tuple<typename Vec::register_type, int, typename Vec::register_type>"
  description: "Tuple containing the merged vector, an int indicating whether the data vector had an overflow (-1: false, >=0 new offset) and the overflow."
  # description: "Vector containing packed and merged elements."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<tuple>", "<sycl/ext/intel/ac_types/ac_int.hpp>"]
    implementation: |
      using T = typename Vec::base_type;
      using UnsignedT = std::make_unsigned_t<T>;
      using BigIntT = ac_int<Vec::vector_size_b(), false>;

      BigIntT packed_data{0};
      #pragma unroll
      for (unsigned i = 0; i < Vec::vector_element_count(); ++i) {
        packed_data |=  (BigIntT{(UnsignedT)data[i]}) << (bitwidth*i);
      }
      BigIntT packed_data_shifted = packed_data << bit_offset;
      typename Vec::register_type result{};
      #pragma unroll
      for (std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
        result[i] = src[i] | (T)(packed_data_shifted.template slc<(sizeof(T)*CHAR_BIT)>((unsigned)(i*(sizeof(T)*CHAR_BIT))));
      }
      // check for overflow
      auto new_bitwidth = (bit_offset + bitwidth * Vec::vector_element_count());
      if (new_bitwidth >= Vec::vector_size_b()) {
        new_bitwidth -= Vec::vector_size_b();
        packed_data >>= (bitwidth * Vec::vector_element_count() - new_bitwidth);
        typename Vec::register_type overflow_result{};
        #pragma unroll
        for (std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
          overflow_result[i] = packed_data.template slc<(sizeof(T)*CHAR_BIT)>((unsigned)(i*(sizeof(T)*CHAR_BIT)));
        }
        return std::make_tuple(result, new_bitwidth, overflow_result);
      }
      return std::make_tuple(result, -1, data);
...
---
primitive_name: "pack_bits_treelike_merge"
brief_description: ""
detailed_description: |
  Packs elements from two vector registers together using a fixed bitwidth. The bitwidth
  must be less than the number of bits in the vector's base type.
  The elements are packed together in little-endian order, i.e. the least
  significant bits of the first element are used first.
  The 'src' operand is assumed to be packed already. The 'bit_offset' parameter indicates
  the bit offset of the last set bit in the 'src' operand. The 'data' operand is packed
  and merged with the 'src' operand. The 'bitwidth' parameter indicates the bitwidth of
  each element in the 'data' operand.
parameters:
  - ctype: "const typename Vec::register_type"
    name: "src"
    description: "Source register which is used for merging (assumed to be packed already)."
  - ctype: "const unsigned"
    name: "bit_offset"
    description: "Bit offset of the last set bit."
  - ctype: "const typename Vec::register_type"
    name: "data"
    description: "Data vector."
  - ctype: "const unsigned"
    name: "bitwidth"
    description: "Bitwidth of each element."
returns:
  ctype: "std::tuple<typename Vec::register_type, int, typename Vec::register_type>"
  description: "Tuple containing the merged vector, an int indicating whether the data vector had an overflow (-1: false, >=0 new offset) and the overflow."
  # description: "Vector containing packed and merged elements."
definitions:
  - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
    ctype: ["uint8_t", "uint16_t", "uint32_t", "uint64_t", "int8_t", "int16_t", "int32_t", "int64_t"]
    lscpu_flags: ["oneAPIfpgaDev"]
    vector_length_agnostic: True
    includes: ["<tuple>", "<sycl/ext/intel/ac_types/ac_int.hpp>"]
    implementation: |
      using T = typename Vec::base_type;
      using UnsignedT = std::make_unsigned_t<T>;
      using BigIntT = ac_int<Vec::vector_size_b(), false>;
      //we are wasting some space here, but it is easier to implement (and maybe even more efficient)
      BigIntT tmp_result[Vec::vector_element_count()];
      #pragma unroll
      for (unsigned int i = 0; i < (Vec::vector_element_count()>>1); ++i) {
        tmp_result[i] = BigIntT{(UnsignedT)data[(i<<1)]} | (BigIntT{(UnsignedT)data[(i<<1)+1]} << bitwidth);
      }
      unsigned current_result_position = Vec::vector_element_count()>>1;
      unsigned previous_stage_start_idx = 0;
      unsigned current_stage = 1;
      #pragma unroll cilog2((Vec::vector_element_count()>>1))
      for(size_t current_upper_idx = (Vec::vector_element_count()>>2); current_upper_idx >= 1; current_upper_idx>>=1) {
          #pragma unroll
          for(size_t i = 0; i < current_upper_idx; ++i) {
            tmp_result[current_result_position + i] =
                tmp_result[previous_stage_start_idx + (i<<1)] | (tmp_result[previous_stage_start_idx + (i<<1)+1] << (bitwidth<<current_stage));
          }
          current_result_position += current_upper_idx;
          previous_stage_start_idx += current_upper_idx<<1;
          ++current_stage;
      }
      BigIntT packed_data = tmp_result[Vec::vector_element_count()-2];
      BigIntT packed_data_shifted = packed_data << bit_offset;

      typename Vec::register_type result{};
      #pragma unroll
      for (std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
        result[i] = src[i] | (T)(packed_data_shifted.template slc<(sizeof(T)*CHAR_BIT)>((unsigned)(i*(sizeof(T)*CHAR_BIT))));
      }
      // check for overflow
      auto new_bitwidth = (bit_offset + bitwidth * Vec::vector_element_count());
      if (new_bitwidth >= Vec::vector_size_b()) {
        new_bitwidth -= Vec::vector_size_b();
        packed_data >>= (bitwidth * Vec::vector_element_count() - new_bitwidth);
        typename Vec::register_type overflow_result{};
        #pragma unroll
        for (std::size_t i = 0; i < Vec::vector_element_count(); ++i) {
          overflow_result[i] = packed_data.template slc<(sizeof(T)*CHAR_BIT)>((unsigned)(i*(sizeof(T)*CHAR_BIT)));
        }
        return std::make_tuple(result, new_bitwidth, overflow_result);
      }
      return std::make_tuple(result, -1, data);
...
# ---
# primitive_name: "pack_bits_treelike"
# brief_description: "Packs elements from a vector together using a fixed bitwidth."
# detailed_description: |
#   Packs elements from a vector together using a fixed bitwidth. The bitwidth
#   must be less than the number of bits in the vector's base type.
#   The elements are packed together in little-endian order, i.e. the least
#   significant bits of the first element are used first.
# parameters:
#   - ctype: "const typename Vec::register_type"
#     name: "data"
#     description: "Data vector."
#   - ctype: "const unsigned"
#     name: "bitwidth"
#     description: "Bitwidth of each element."
# returns:
#   ctype: "typename Vec::register_type"
#   description: "Vector containing packed elements."
# definitions:
#   - target_extension: ["oneAPIfpga", "oneAPIfpgaRTL"]
#     ctype: ["uint64_t"]
#     lscpu_flags: ["oneAPIfpgaDev"]
#     vector_length_agnostic: True
#     includes: ["<sycl/ext/intel/ac_types/ac_int.hpp>"]
#     implementation: |
#       using T = typename Vec::base_type;
#       typename Vec::register_type result{};
#       #pragma unroll
#       for(int i = 0; i < Vec::vector_element_count(); i+=16) {
#         T add_1_1 = value[ 0] + value[ 1];
#         T add_1_2 = value[ 2] + value[ 3];
#         T add_1_3 = value[ 4] + value[ 5];
#         T add_1_4 = value[ 6] + value[ 7];

#         T add_2_1 = add_1_1 + add_1_2;
#         T add_2_2 = add_1_3 + add_1_4;

#         result += add_2_1 + add_2_2;
#       }
#       return result;
# ...
